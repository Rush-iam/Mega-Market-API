"""Item table triggers

Revision ID: 0b9d7876f21c
Revises: 968b8270ca5a
Create Date: 2022-06-22 00:03:38.427767

"""
from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision = '0b9d7876f21c'
down_revision = '968b8270ca5a'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_get_item_type = PGFunction(
        schema="public",
        signature="get_item_type(item_id UUID)",
        definition="RETURNS VARCHAR AS\n                $$\n                BEGIN\n                    RETURN (\n                        SELECT type\n                            FROM items\n                            WHERE id = item_id\n                    );\n                END;\n                $$ language 'plpgsql'"
    )
    op.create_entity(public_get_item_type)

    public_update_category_date = PGFunction(
        schema="public",
        signature="update_category_date()",
        definition="RETURNS TRIGGER AS\n                $$\n                BEGIN\n                    UPDATE items\n                        SET date = NEW.date\n                        WHERE id = NEW.parent_id;\n                    RETURN NEW;\n                END;\n                $$ language 'plpgsql'"
    )
    op.create_entity(public_update_category_date)

    public_exception_type_modified = PGFunction(
        schema="public",
        signature="exception_type_modified()",
        definition="RETURNS TRIGGER AS\n                $$\n                BEGIN\n                    RAISE EXCEPTION\n                        'Modification of column - type - is forbidden'\n                        USING ERRCODE = 'check_violation';\n                    RETURN NEW;\n                END;\n                $$ language 'plpgsql'"
    )
    op.create_entity(public_exception_type_modified)

    public_check_parent_is_category = PGFunction(
        schema="public",
        signature="check_parent_is_category()",
        definition="RETURNS TRIGGER AS\n                $$\n                BEGIN\n                if get_item_type(NEW.parent_id) != 'CATEGORY' THEN\n                    RAISE EXCEPTION\n                        'Parent must be - CATEGORY'\n                        USING ERRCODE = 'check_violation';\n                END IF;\n                RETURN NEW;\n                END;\n                $$ language 'plpgsql'"
    )
    op.create_entity(public_check_parent_is_category)

    public_items_update_category_date = PGTrigger(
        schema="public",
        signature="update_category_date",
        on_entity="public.items",
        is_constraint=False,
        definition='AFTER INSERT OR UPDATE ON items FOR EACH ROW\n                WHEN (NEW.parent_id IS NOT NULL)\n                EXECUTE PROCEDURE update_category_date()'
    )
    op.create_entity(public_items_update_category_date)

    public_items_check_type_modified = PGTrigger(
        schema="public",
        signature="check_type_modified",
        on_entity="public.items",
        is_constraint=False,
        definition='BEFORE UPDATE ON items FOR EACH ROW\n                WHEN (NEW.type IS DISTINCT FROM OLD.type)\n                EXECUTE PROCEDURE exception_type_modified()'
    )
    op.create_entity(public_items_check_type_modified)

    public_items_check_parent_is_category = PGTrigger(
        schema="public",
        signature="check_parent_is_category",
        on_entity="public.items",
        is_constraint=False,
        definition='AFTER INSERT OR UPDATE ON items FOR EACH ROW\n                EXECUTE PROCEDURE check_parent_is_category()'
    )
    op.create_entity(public_items_check_parent_is_category)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_items_check_parent_is_category = PGTrigger(
        schema="public",
        signature="check_parent_is_category",
        on_entity="public.items",
        is_constraint=False,
        definition='AFTER INSERT OR UPDATE ON items FOR EACH ROW\n                EXECUTE PROCEDURE check_parent_is_category()'
    )
    op.drop_entity(public_items_check_parent_is_category)

    public_items_check_type_modified = PGTrigger(
        schema="public",
        signature="check_type_modified",
        on_entity="public.items",
        is_constraint=False,
        definition='BEFORE UPDATE ON items FOR EACH ROW\n                WHEN (NEW.type IS DISTINCT FROM OLD.type)\n                EXECUTE PROCEDURE exception_type_modified()'
    )
    op.drop_entity(public_items_check_type_modified)

    public_items_update_category_date = PGTrigger(
        schema="public",
        signature="update_category_date",
        on_entity="public.items",
        is_constraint=False,
        definition='AFTER INSERT OR UPDATE ON items FOR EACH ROW\n                WHEN (NEW.parent_id IS NOT NULL)\n                EXECUTE PROCEDURE update_category_date()'
    )
    op.drop_entity(public_items_update_category_date)

    public_check_parent_is_category = PGFunction(
        schema="public",
        signature="check_parent_is_category()",
        definition="RETURNS TRIGGER AS\n                $$\n                BEGIN\n                if get_item_type(NEW.parent_id) != 'CATEGORY' THEN\n                    RAISE EXCEPTION\n                        'Parent must be - CATEGORY'\n                        USING ERRCODE = 'check_violation';\n                END IF;\n                RETURN NEW;\n                END;\n                $$ language 'plpgsql'"
    )
    op.drop_entity(public_check_parent_is_category)

    public_exception_type_modified = PGFunction(
        schema="public",
        signature="exception_type_modified()",
        definition="RETURNS TRIGGER AS\n                $$\n                BEGIN\n                    RAISE EXCEPTION\n                        'Modification of column - type - is forbidden'\n                        USING ERRCODE = 'check_violation';\n                    RETURN NEW;\n                END;\n                $$ language 'plpgsql'"
    )
    op.drop_entity(public_exception_type_modified)

    public_update_category_date = PGFunction(
        schema="public",
        signature="update_category_date()",
        definition="RETURNS TRIGGER AS\n                $$\n                BEGIN\n                    UPDATE items\n                        SET date = NEW.date\n                        WHERE id = NEW.parent_id;\n                    RETURN NEW;\n                END;\n                $$ language 'plpgsql'"
    )
    op.drop_entity(public_update_category_date)

    public_get_item_type = PGFunction(
        schema="public",
        signature="get_item_type(item_id UUID)",
        definition="RETURNS VARCHAR AS\n                $$\n                BEGIN\n                    RETURN (\n                        SELECT type\n                            FROM items\n                            WHERE id = item_id\n                    );\n                END;\n                $$ language 'plpgsql'"
    )
    op.drop_entity(public_get_item_type)

    # ### end Alembic commands ###
